version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.15
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  auth-1:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  auth-2:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  user-1:
    build:
      context: ./user
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  user-2:
    build:
      context: ./user
      dockerfile: Dockerfile
    ports:
      - "3004:3000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - app-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - auth-1
      - auth-2
      - user-1
      - user-2
    networks:
      - app-network

  db:
    image: postgres:latest
    hostname: pg_db
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    env_file:
      - ./.env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  pg_data:
